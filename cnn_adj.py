#adj记录成list
#或记录成其他格式/保存为图片
#记录所有jc
#复制的程序，与pro1同时运行节省时间
#感染图改成根据感染节点连接所有边
#同时改变node_labels, 
# adj为NxN;

#propagation5_lei_jian_pro进化，SI模型
#考虑边的权重且按照总数来生成传播图
#propagation_pro1_4.py是单张病毒图的程序

#500节点时，如果同时计算其他方法的每张图的中心，很慢

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import csv
import networkx as nx
import os
import random
from itertools import islice
import torch
from scipy.sparse.coo import coo_matrix
import argparse
import math
from random import choice
import community as community_louvain
from PIL import Image
import cv2
#变量：B，sn范围,每个sn张数 ，Infectionrate, Roundtime，data文件名

N =2068#记得必须改
fname = "p2p2068"

G = nx.read_edgelist('./'+fname+'_weight.txt',nodetype = int,data=(('weight',float),),create_using=nx.DiGraph())

#partition=np.load(fname+'_k10p'+'.npy',allow_pickle = True).item()
graph_labels = []
graph_labels_class=[]
countedge = []
countadj = []
part=0.1
InfectionRate = 0.5#概率太大，10轮感染1400个节点
Roundtime = 3
adjall = []
def genGraph(sn,datadir,bmname,m):

#感染过程
    node = list(map(int,G.nodes))#图中节点列表，元素转化为整数型
    S = node
    I = []

    j=0
    while j<1:
        #start_node = random.choice(node)#1个初始感染节点
        start_node = sn#1个初始感染节点
        I.append(start_node)
        S.remove(start_node)
        j=j+1
    
    print(start_node)
    
    new_G_small = nx.DiGraph()
    count = [1]
    statechange = []
    turn = 0
    #for i in range(Roundtime):       #####从I开始遍历，小于边的概率就感染
    while len(I)<=part*len(G.nodes()):
        for nbr, datadict in G.adj.items():#遍历G的所有节点，nbr节点名称，datadict与节点相连的边
            if int(nbr) in I:            
                for key in datadict:
                    if int(key) in S:
                        rate = G.get_edge_data(int(nbr),int(key))['weight']   #I->S 
                        if random.random() <= rate: 
                            statechange.append(int(key))
                            #new_G_small.add_edge(int(nbr),int(key))     #I->S
        statechange=list(set(statechange))
        for i in statechange:
            S.remove(i)
            I.append(i)
        count.append(len(I))
        statechange = []
        turn = turn+1
        if turn==10:
            if(len(I)==1):
                break
    resultall_list = []
    for state in range(N):
        if state in I:
            resultall_list.append(1)
        else:
            resultall_list.append(0)
    #print(resultall)
    #print(resultall_list)
    resultall_list = np.array(resultall_list)
    perfix = os.path.join(datadir,bmname)
    #filename_node_labels = perfix + '_xnode_labels.txt'
    #filename_adj = perfix+'_adjdata'
    filename_x = perfix+'_x'

    adj_matrix = nx.adjacency_matrix(G).todense()
    countadj_now=adj_matrix.shape[1]
    #countadj.append(adj_matrix.shape[1])
    #countedge.append(G.number_of_edges())

    graph_labels.append(start_node)
    #graph_labels_class.append(partition[start_node])####k-means 分类方法

    if not os.path.exists(filename_x):
        os.makedirs(filename_x)
    number = sn*100+m
    np.save(filename_x+'/'+str(number)+'.npy',resultall_list)
    # A = nx.to_numpy_matrix(G) 
    # #adjall.append(A)
    # if not os.path.exists(filename_adj):
    #     os.makedirs(filename_adj)
    # np.save(filename_adj+'/'+str(number)+'.npy',A)

    return (adj_matrix,countadj_now)

#可以自己造邻接矩阵，行和列的范围从adj_matrix.shape开始增加
#直接生成data_A.txt  边的邻接矩阵
def data_A(datadir,bmname):
    perfix = os.path.join(datadir,bmname)

    sum_ca_now = 0
    graphs=5
    # nodehead=0
    # nodetail=200
    # class0= [0, 1, 2, 3, 4, 5, 6, 7, 9, 11, 24, 25, 26, 28, 31, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 78, 80, 82, 83, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 107, 109, 144, 166, 170, 172, 174, 175, 177, 178, 180, 181, 182, 183, 184, 186, 188, 202, 203, 205, 207, 208, 211, 212, 213, 214, 215, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 244, 245, 246, 249, 258, 260, 261, 262, 263, 265, 268, 271, 273, 274, 275, 276, 286, 290, 291, 296, 298, 310, 326, 327, 328, 329, 330, 335, 345, 346, 347, 348, 363, 364, 368, 372, 374, 381, 382, 384, 385, 386, 387, 390, 393, 395, 396, 398, 402, 403, 411, 413, 415, 423, 424, 425, 426, 427, 428, 429, 430, 432, 435, 440, 450, 451, 455, 461, 468, 469, 470, 471, 474, 478, 479, 481, 482, 485, 487, 495]
    # class1= [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 64, 69, 74, 77, 79, 85, 99, 102, 110, 111, 134, 138, 161, 162, 163, 164, 167, 168, 169, 171, 173, 191, 192, 193, 194, 198, 204, 247, 252, 256, 259, 264, 267, 269, 270, 272, 281, 282, 283, 292, 293, 294, 299, 302, 303, 304, 305, 306, 315, 323, 325, 349, 350, 367, 369, 370, 371, 376, 377, 383, 394, 401, 416, 417, 418, 419, 420, 421, 449, 452, 453, 454, 458, 459, 473, 475, 476, 486, 490, 493]
    # class2= [33, 34, 35, 36, 37, 38, 49, 112, 113, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 189, 216, 217, 218, 254, 255, 277, 278, 288, 300, 301, 308, 309, 311, 312, 313, 314, 317, 318, 319, 336, 337, 338, 339, 343, 344, 373, 378, 379, 380, 388, 389, 397, 399, 400, 404, 405, 406, 407, 412, 437, 462, 463, 464, 465, 480, 483, 488, 489, 492, 494, 496, 497, 498, 499]
    # class3= [8, 10, 12, 27, 29, 30, 32, 39, 40, 41, 42, 44, 45, 81, 84, 86, 87, 90, 91, 106, 108, 114, 115, 117, 123, 125, 128, 133, 140, 141, 142, 143, 165, 176, 179, 185, 187, 190, 195, 196, 197, 199, 200, 201, 206, 209, 210, 219, 220, 221, 222, 238, 241, 242, 243, 248, 250, 251, 253, 257, 266, 279, 280, 284, 285, 287, 289, 295, 297, 307, 316, 320, 321, 322, 324, 331, 332, 333, 334, 340, 341, 342, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 375, 391, 392, 408, 409, 410, 414, 422, 431, 433, 434, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 456, 457, 460, 466, 467, 472, 477, 484, 491]
    # class0= [33, 34, 35, 36, 37, 38, 49, 112, 113, 116, 118, 119, 120, 121, 122, 124, 126, 127, 129, 130, 131, 132, 135, 136, 137, 139, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 189, 216, 217, 218, 254, 255, 277, 278, 288, 300, 301, 308, 309, 311, 312, 313, 314, 317, 318, 319, 336, 337, 338, 339, 343, 344, 373, 378, 379, 380, 388, 389, 397, 399, 400, 404, 405, 406, 407, 412, 437, 462, 463, 464, 465, 480, 483, 488, 489, 492, 494, 496, 497, 498, 499]
    # class1= [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 64, 69, 74, 77, 79, 85, 99, 102, 110, 111, 134, 138, 161, 162, 163, 164, 167, 168, 169, 171, 173, 191, 192, 193, 194, 198, 204, 247, 252, 256, 259, 264, 267, 269, 270, 272, 281, 282, 283, 292, 293, 294, 299, 302, 303, 304, 305, 306, 315, 323, 325, 349, 350, 367, 369, 370, 371, 376, 377, 383, 394, 401, 416, 417, 418, 419, 420, 421, 449, 452, 453, 454, 458, 459, 473, 475, 476, 486, 490, 493]
    # class2= [0, 1, 2, 4, 5, 6, 31, 43, 46, 47, 48, 50, 55, 57, 58, 70, 71, 75, 76, 78, 172, 180, 183, 188, 202, 203, 207, 223, 225, 226, 227, 229, 230, 231, 236, 239, 244, 245, 249, 310, 326, 327, 328, 329, 330, 345, 346, 347, 348, 363, 368, 372, 382, 384, 387, 396, 398, 402, 403, 413, 415, 432, 435, 450, 451, 455, 469, 471, 481, 487]
    # class3= [3, 7, 9, 11, 12, 24, 25, 26, 27, 28, 32, 51, 52, 53, 54, 56, 59, 60, 61, 62, 63, 65, 66, 67, 68, 72, 73, 80, 82, 83, 88, 89, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 104, 105, 107, 108, 109, 144, 165, 166, 170, 174, 175, 176, 177, 178, 181, 182, 184, 186, 205, 206, 208, 211, 212, 213, 214, 215, 224, 228, 232, 233, 234, 235, 237, 238, 240, 241, 246, 258, 260, 261, 262, 263, 265, 268, 271, 273, 274, 275, 276, 279, 280, 284, 286, 287, 290, 291, 296, 297, 298, 316, 324, 331, 332, 333, 335, 352, 353, 356, 361, 362, 364, 374, 381, 385, 386, 390, 393, 395, 408, 409, 410, 411, 423, 424, 425, 426, 427, 428, 429, 430, 436, 440, 447, 460, 461, 468, 470, 472, 474, 478, 479, 482, 485, 495]
    # class4= [8, 10, 29, 30, 39, 40, 41, 42, 44, 45, 81, 84, 86, 87, 90, 91, 106, 114, 115, 117, 123, 125, 128, 133, 140, 141, 142, 143, 179, 185, 187, 190, 195, 196, 197, 199, 200, 201, 209, 210, 219, 220, 221, 222, 242, 243, 248, 250, 251, 253, 257, 266, 285, 289, 295, 307, 320, 321, 322, 334, 340, 341, 342, 351, 354, 355, 357, 358, 359, 360, 365, 366, 375, 391, 392, 414, 422, 431, 433, 434, 438, 439, 441, 442, 443, 444, 445, 446, 448, 456, 457, 466, 467, 477, 484, 491]
    # ###97 , 91 , 70 , 146 , 96
    class0= [3, 5, 9, 28, 31, 53, 56, 68, 75, 77, 81, 87, 90, 92, 93, 96, 98, 103, 105, 109, 117, 138, 139, 144, 158, 160, 165, 174, 177, 188, 189, 192, 194, 196, 201, 218, 221, 227, 230, 240, 244, 248, 251, 252, 256, 257, 268, 269, 272, 282, 283, 289, 296, 299, 300, 306, 307, 320, 324, 338, 339, 341, 351, 352, 356, 361, 364, 365, 367, 386, 389, 390, 395, 402, 412, 415, 419, 420, 421, 429, 434, 439, 442, 446, 451, 453, 456, 458, 461, 464, 468, 469, 477, 479, 483, 484, 495, 497, 501, 502, 507, 509, 512, 515, 520, 521, 524, 525, 530, 532, 535, 537, 538, 540, 544, 551, 557, 560, 561, 564, 566, 580, 581, 596, 605, 611, 615, 621, 624, 625, 630, 637, 638, 645, 648, 653, 656, 660, 686, 687, 696, 700, 707, 714, 723, 724, 734, 738, 741, 768, 776, 782, 784, 792, 793, 794, 799, 810, 821, 827, 830, 834, 853, 857, 858, 859, 862, 867, 876, 877, 884, 885, 886, 887, 888, 924, 926, 927, 929, 931, 937, 940, 952, 953, 961, 970, 978, 979, 983, 985, 994, 1001, 1003, 1007, 1025, 1034, 1043, 1044, 1047, 1048, 1054, 1061, 1069, 1070, 1082, 1097, 1099, 1103, 1104, 1125, 1127, 1129, 1130, 1135, 1137, 1138, 1145, 1154, 1165, 1167, 1168, 1174, 1177, 1187, 1191, 1193, 1203, 1206, 1208, 1215, 1220, 1224, 1226, 1229, 1235, 1244, 1251, 1264, 1266, 1273, 1275, 1276, 1282, 1286, 1297, 1299, 1301, 1310, 1316, 1318, 1320, 1324, 1330, 1331, 1341, 1344, 1354, 1359, 1360, 1368, 1371, 1372, 1373, 1382, 1386, 1390, 1395, 1404, 1407, 1408, 1411, 1412, 1413, 1421, 1423, 1432, 1439, 1447, 1462, 1463, 1465, 1476, 1477, 1480, 1493, 1495, 1496, 1498, 1508, 1517, 1523, 1524, 1531, 1553, 1560, 1571, 1572, 1576, 1585, 1587, 1589, 1591, 1597, 1599, 1606, 1612, 1614, 1618, 1620, 1621, 1626, 1628, 1630, 1632, 1636, 1640, 1643, 1650, 1658, 1670, 1678, 1680, 1682, 1683, 1686, 1687, 1693, 1695, 1699, 1702, 1707, 1708, 1713, 1729, 1730, 1735, 1745, 1748, 1759, 1763, 1769, 1770, 1773, 1776, 1791, 1807, 1809, 1814, 1828, 1831, 1835, 1840, 1844, 1853, 1858, 1859, 1860, 1873, 1887, 1889, 1890, 1891, 1893, 1900, 1903, 1910, 1911, 1921, 1925, 1931, 1933, 1934, 1935, 1938, 1941, 1947, 1955, 1963, 1964, 1969, 1981, 1983, 1984, 1989, 1993, 1994, 2004, 2009, 2013, 2015, 2016, 2019, 2027, 2033, 2044, 2050, 2053, 2054, 2056, 2061]
    class1= [14, 29, 33, 34, 37, 39, 54, 58, 61, 65, 71, 83, 91, 99, 113, 114, 115, 116, 126, 133, 135, 136, 146, 159, 168, 169, 175, 183, 185, 204, 209, 216, 217, 226, 229, 233, 234, 235, 238, 242, 246, 249, 250, 254, 258, 263, 321, 322, 323, 333, 335, 337, 344, 346, 350, 353, 363, 369, 371, 372, 377, 387, 396, 397, 401, 404, 405, 410, 414, 417, 425, 430, 433, 435, 440, 443, 447, 467, 470, 475, 487, 494, 496, 498, 513, 516, 522, 528, 556, 565, 574, 595, 597, 608, 610, 620, 623, 628, 634, 635, 644, 646, 650, 654, 661, 662, 664, 669, 675, 676, 678, 679, 683, 690, 694, 699, 704, 705, 711, 722, 743, 750, 753, 760, 763, 769, 774, 775, 786, 788, 804, 805, 815, 822, 825, 841, 843, 845, 847, 851, 861, 865, 875, 892, 896, 903, 908, 914, 915, 919, 920, 921, 939, 946, 948, 949, 968, 1002, 1010, 1017, 1029, 1030, 1037, 1045, 1050, 1052, 1058, 1066, 1075, 1088, 1092, 1102, 1112, 1121, 1147, 1151, 1153, 1155, 1161, 1175, 1180, 1189, 1195, 1197, 1204, 1205, 1217, 1218, 1222, 1247, 1258, 1305, 1307, 1329, 1339, 1347, 1356, 1357, 1376, 1388, 1389, 1392, 1399, 1401, 1424, 1426, 1436, 1438, 1445, 1448, 1455, 1456, 1467, 1472, 1474, 1478, 1482, 1490, 1492, 1500, 1505, 1506, 1516, 1543, 1544, 1548, 1549, 1551, 1554, 1558, 1565, 1588, 1590, 1595, 1609, 1619, 1638, 1641, 1642, 1644, 1654, 1656, 1660, 1661, 1672, 1673, 1675, 1676, 1679, 1691, 1696, 1714, 1720, 1738, 1742, 1751, 1795, 1806, 1812, 1824, 1834, 1837, 1845, 1849, 1850, 1864, 1872, 1876, 1880, 1884, 1885, 1897, 1898, 1915, 1922, 1950, 1953, 1959, 1967, 1968, 1973, 1976, 1977, 2012, 2024, 2035, 2036, 2057, 2058, 2065]
    class2= [42, 62, 64, 80, 111, 119, 143, 161, 171, 176, 191, 197, 219, 231, 243, 260, 265, 280, 297, 302, 317, 318, 319, 360, 373, 376, 378, 406, 407, 416, 418, 422, 431, 460, 463, 472, 478, 482, 486, 489, 510, 514, 541, 559, 573, 577, 585, 588, 589, 604, 606, 609, 633, 640, 641, 642, 647, 670, 709, 713, 715, 730, 735, 737, 767, 789, 809, 811, 816, 828, 833, 842, 848, 849, 866, 868, 869, 878, 883, 889, 911, 917, 928, 936, 942, 944, 959, 962, 969, 990, 1005, 1006, 1011, 1019, 1023, 1041, 1049, 1053, 1060, 1071, 1084, 1090, 1095, 1100, 1115, 1119, 1132, 1133, 1157, 1159, 1188, 1192, 1212, 1219, 1221, 1232, 1239, 1249, 1250, 1254, 1257, 1262, 1265, 1283, 1295, 1309, 1313, 1314, 1315, 1332, 1334, 1338, 1345, 1346, 1370, 1380, 1396, 1398, 1409, 1425, 1443, 1460, 1479, 1483, 1494, 1503, 1514, 1533, 1547, 1550, 1555, 1559, 1568, 1573, 1578, 1580, 1594, 1601, 1623, 1637, 1639, 1645, 1651, 1689, 1690, 1703, 1704, 1717, 1722, 1750, 1760, 1762, 1772, 1777, 1783, 1785, 1792, 1799, 1822, 1829, 1836, 1843, 1870, 1871, 1878, 1883, 1896, 1930, 1948, 1971, 1972, 1978, 1982, 1986, 1988, 1990, 2001, 2005, 2022, 2032, 2037, 2045, 2049, 2066]
    class3= [10, 18, 24, 26, 36, 59, 63, 88, 97, 120, 121, 129, 130, 131, 153, 157, 162, 164, 178, 187, 195, 210, 211, 212, 220, 225, 236, 266, 271, 281, 284, 293, 303, 304, 325, 327, 332, 334, 336, 359, 366, 370, 380, 393, 394, 399, 413, 428, 432, 450, 454, 457, 474, 492, 499, 518, 533, 546, 558, 570, 572, 576, 579, 583, 614, 616, 619, 636, 639, 643, 651, 657, 658, 659, 665, 667, 672, 673, 682, 716, 719, 739, 740, 744, 751, 758, 762, 764, 773, 785, 787, 797, 812, 826, 835, 836, 850, 852, 854, 860, 872, 879, 882, 890, 902, 904, 906, 923, 947, 954, 958, 971, 981, 982, 1014, 1016, 1022, 1036, 1040, 1042, 1051, 1057, 1064, 1068, 1072, 1083, 1085, 1094, 1096, 1108, 1111, 1120, 1144, 1162, 1173, 1186, 1190, 1234, 1236, 1240, 1269, 1284, 1288, 1292, 1325, 1333, 1336, 1340, 1343, 1355, 1358, 1369, 1400, 1402, 1405, 1418, 1420, 1422, 1427, 1430, 1431, 1453, 1458, 1459, 1461, 1464, 1486, 1499, 1512, 1520, 1521, 1522, 1525, 1532, 1541, 1546, 1581, 1583, 1592, 1607, 1613, 1629, 1631, 1649, 1652, 1653, 1659, 1667, 1668, 1705, 1706, 1710, 1715, 1718, 1736, 1765, 1766, 1781, 1786, 1808, 1816, 1818, 1819, 1825, 1832, 1833, 1847, 1852, 1861, 1865, 1866, 1882, 1892, 1917, 1920, 1923, 1927, 1928, 1929, 1945, 1980, 2007, 2008, 2011, 2025, 2041, 2047, 2067]
    class4= [23, 27, 49, 72, 123, 134, 142, 147, 152, 167, 179, 180, 200, 224, 245, 259, 264, 275, 277, 286, 288, 294, 301, 310, 314, 329, 362, 379, 384, 423, 449, 506, 539, 548, 567, 569, 578, 584, 593, 599, 617, 618, 622, 649, 666, 668, 697, 717, 728, 748, 755, 757, 778, 783, 798, 808, 813, 818, 831, 838, 894, 913, 963, 989, 991, 998, 1009, 1012, 1020, 1031, 1035, 1038, 1067, 1077, 1078, 1109, 1131, 1139, 1150, 1163, 1181, 1201, 1237, 1241, 1278, 1279, 1281, 1289, 1317, 1337, 1348, 1361, 1379, 1385, 1450, 1451, 1454, 1457, 1466, 1469, 1481, 1501, 1528, 1536, 1545, 1563, 1564, 1596, 1615, 1616, 1625, 1627, 1655, 1669, 1677, 1732, 1757, 1764, 1778, 1784, 1788, 1804, 1826, 1838, 1857, 1875, 1879, 1888, 1904, 1946, 1956, 1965, 1985, 1991, 1996, 1999, 2002, 2010, 2060, 2062]
    class5= [1, 8, 15, 17, 21, 35, 38, 47, 50, 51, 66, 79, 104, 108, 110, 112, 128, 132, 137, 155, 163, 172, 186, 190, 198, 206, 213, 222, 237, 247, 273, 276, 278, 279, 291, 292, 309, 312, 315, 345, 374, 375, 382, 392, 408, 427, 436, 441, 444, 445, 466, 471, 485, 488, 490, 493, 503, 511, 519, 526, 527, 536, 547, 553, 554, 555, 568, 586, 590, 591, 592, 613, 631, 671, 674, 680, 685, 691, 698, 701, 708, 712, 718, 720, 721, 727, 729, 746, 747, 752, 770, 772, 777, 779, 780, 791, 806, 807, 814, 819, 820, 824, 837, 839, 844, 863, 870, 871, 874, 880, 881, 891, 898, 900, 905, 909, 925, 930, 932, 935, 938, 943, 957, 960, 965, 967, 974, 975, 977, 980, 986, 995, 1000, 1024, 1027, 1056, 1062, 1081, 1101, 1107, 1113, 1114, 1117, 1122, 1126, 1136, 1146, 1158, 1160, 1164, 1169, 1170, 1176, 1178, 1183, 1194, 1196, 1198, 1200, 1207, 1211, 1213, 1216, 1225, 1228, 1230, 1231, 1238, 1245, 1253, 1261, 1272, 1274, 1277, 1280, 1287, 1291, 1293, 1294, 1302, 1303, 1308, 1311, 1323, 1327, 1335, 1351, 1352, 1362, 1363, 1366, 1367, 1375, 1377, 1384, 1410, 1414, 1416, 1417, 1444, 1446, 1470, 1471, 1484, 1485, 1487, 1489, 1491, 1497, 1504, 1513, 1518, 1535, 1538, 1542, 1556, 1561, 1562, 1569, 1570, 1574, 1575, 1579, 1586, 1598, 1603, 1605, 1610, 1611, 1622, 1624, 1634, 1657, 1664, 1692, 1694, 1697, 1698, 1701, 1711, 1716, 1719, 1723, 1724, 1728, 1739, 1744, 1752, 1771, 1774, 1787, 1796, 1797, 1810, 1815, 1841, 1842, 1846, 1851, 1863, 1868, 1881, 1886, 1901, 1902, 1906, 1912, 1924, 1932, 1949, 1954, 1998, 2021, 2029, 2030, 2034, 2038, 2039, 2048, 2055, 2063]
    class6= [7, 25, 46, 48, 76, 94, 100, 145, 154, 156, 214, 215, 223, 285, 295, 381, 409, 459, 465, 706, 846, 873, 912, 997, 1004, 1013, 1073, 1089, 1110, 1118, 1141, 1143, 1202, 1233, 1243, 1256, 1381, 1383, 1406, 1429, 1519, 1527, 1540, 1552, 1582, 1593, 1671, 1681, 1768, 1823, 1855, 1862, 1914, 1939, 1961, 2020, 2026, 2031, 2042, 2051]
    class7= [2, 12, 13, 20, 22, 30, 40, 41, 43, 44, 45, 57, 74, 82, 84, 86, 101, 102, 125, 127, 151, 173, 184, 193, 199, 207, 208, 239, 241, 255, 261, 262, 267, 274, 308, 311, 313, 316, 326, 328, 330, 331, 342, 347, 349, 354, 355, 358, 383, 403, 426, 448, 455, 462, 473, 476, 481, 500, 517, 529, 531, 543, 549, 550, 562, 563, 571, 575, 582, 594, 600, 603, 607, 612, 632, 652, 655, 663, 681, 684, 688, 689, 692, 695, 703, 710, 731, 736, 745, 749, 761, 766, 771, 781, 790, 795, 800, 801, 802, 817, 823, 856, 907, 916, 918, 922, 933, 945, 955, 964, 966, 973, 996, 1015, 1018, 1028, 1032, 1046, 1055, 1076, 1079, 1091, 1106, 1116, 1124, 1149, 1152, 1156, 1166, 1171, 1179, 1185, 1199, 1210, 1242, 1246, 1248, 1260, 1267, 1268, 1270, 1271, 1285, 1296, 1298, 1304, 1319, 1321, 1322, 1342, 1349, 1350, 1353, 1374, 1387, 1393, 1394, 1433, 1473, 1488, 1510, 1515, 1526, 1530, 1534, 1566, 1577, 1608, 1633, 1635, 1662, 1663, 1666, 1684, 1685, 1688, 1709, 1725, 1731, 1733, 1737, 1740, 1743, 1746, 1747, 1749, 1754, 1755, 1756, 1767, 1782, 1793, 1794, 1800, 1805, 1813, 1821, 1827, 1830, 1839, 1848, 1854, 1856, 1869, 1877, 1899, 1905, 1908, 1909, 1913, 1916, 1918, 1926, 1937, 1940, 1942, 1943, 1944, 1952, 1960, 1962, 1974, 1975, 1979, 1987, 1995, 1997, 2000, 2003, 2006, 2017, 2023, 2028, 2043, 2046, 2064]
    class8= [0, 4, 6, 11, 16, 19, 32, 52, 55, 67, 69, 70, 73, 78, 85, 89, 95, 107, 118, 122, 124, 140, 141, 148, 149, 150, 170, 181, 182, 202, 203, 205, 228, 232, 253, 270, 287, 305, 340, 343, 348, 357, 368, 385, 391, 398, 400, 411, 424, 437, 452, 491, 504, 505, 508, 523, 534, 542, 545, 552, 598, 601, 602, 626, 627, 629, 677, 693, 702, 725, 726, 732, 733, 742, 754, 756, 759, 765, 803, 829, 840, 855, 864, 893, 895, 897, 901, 910, 934, 941, 950, 951, 956, 972, 976, 984, 987, 988, 992, 993, 999, 1008, 1021, 1026, 1033, 1039, 1063, 1065, 1074, 1080, 1086, 1087, 1093, 1098, 1105, 1123, 1134, 1142, 1148, 1172, 1182, 1184, 1209, 1214, 1223, 1227, 1252, 1255, 1259, 1263, 1290, 1300, 1306, 1312, 1326, 1328, 1364, 1391, 1397, 1403, 1415, 1419, 1435, 1437, 1440, 1441, 1442, 1449, 1452, 1468, 1475, 1502, 1509, 1511, 1529, 1537, 1539, 1557, 1567, 1584, 1600, 1602, 1604, 1617, 1646, 1647, 1648, 1665, 1674, 1700, 1712, 1721, 1726, 1727, 1734, 1741, 1753, 1758, 1761, 1775, 1779, 1780, 1789, 1790, 1798, 1801, 1802, 1803, 1817, 1820, 1867, 1894, 1895, 1907, 1919, 1936, 1951, 1957, 1958, 1966, 1970, 1992, 2014, 2018, 2052, 2059]
    class9= [60, 106, 166, 290, 298, 388, 438, 480, 587, 796, 832, 899, 1059, 1128, 1140, 1365, 1378, 1428, 1434, 1507, 1811, 1874, 2040]
    nodelist = class7
    for nodesn in nodelist:
    #for nodesn in range(nodehead,nodetail):
        for j in range(graphs):
            adj,ca_now=genGraph(nodesn,datadir,bmname,j)

    filename_readme = perfix + 'readme.txt'
    with open(filename_readme,'a') as f:
        #f.write('InfectionRate='+str(InfectionRate)+"\n")
        #f.write('Roundtime='+str(Roundtime)+"\n")
        #f.write('[a,b]='+str(nodehead)+','+str(nodetail)+"\n")
        f.write('nodelist='+str(nodelist)+'\n')
        f.write('every node graphs='+str(graphs)+"\n")


def main():

    bmname = 'p2p2068_p0.1_m50_c7_test'
    #path = os.path.join('/home/zhang/Documents/pytorch/learn/GraphKernel/rexying_diffpool/diffpool-master/data',bmname)
    #path = os.path.join('/home/iot/zcy/usb/copy/rexying_diffpool/diffpool-master/data',bmname)
    path = os.path.join('/home/iot/zcy/usb/copy/myGCN/cnn_data',bmname)
    #path = os.path.join('data',bmname)#调试时生成的文件夹
    if not os.path.exists(path):
        os.makedirs(path)
    perfix = os.path.join(path,bmname)
    filename_readme = perfix+'readme.txt'
    with open(filename_readme,'w') as f:
        f.write('bmname = '+str(bmname)+"\n")
        f.write('N='+str(N)+"\n")
        f.write('底图='+fname+".npy"+"\n")
        f.write(fname+'底图，感染节点占part比例时停止传播，z=0.1，包括多种对比方法，平均分10类'+"\n")
        f.write('part='+str(part)+"\n")
        #f.write('val_datatest'+"\n")

    data=open(filename_readme,'a')
    data_A(path,bmname)
    #graph_label(path,bmname)
    #graph_indicator(path,bmname)
    #graph_label_classfication(path,bmname)
    #np.save(perfix+ '_adj',adjall)
    # dis_s=0
    # for i in countedge:
    #     dis_s=dis_s+i
    # print('sum of edges:',file=data)
    # print(str(dis_s)+'\n',file=data)
    # s1=0
    # for i in countadj:
    #     s1=s1+i
    # print('sum of adj:',file=data)
    # print(str(s1)+'\n',file=data)

def graph_indicator(datadir,bmname):
    perfix = os.path.join(datadir,bmname)
    filename_graph_indic = perfix + '_graph_indicator.txt'
    with open(filename_graph_indic,'a') as f:                   #a追加，w覆盖
        i=1
        for val in countadj:
            for j in range(int(val)):
                f.write(str(i))
                f.write('\n')
            i=i+1
def graph_label(datadir,bmname):
    perfix = os.path.join(datadir,bmname)
    filename_graph_labels = perfix+ '_graph_labels.txt'
    with open(filename_graph_labels,'a') as f:
        for i in graph_labels:
            f.write(str(i))
            f.write('\n')
def graph_label_classfication(datadir,bmname): #分类后的节点标签
    perfix = os.path.join(datadir,bmname)
    filename_graph_labels_class = perfix+ '_graph_labels_class.txt'
    with open(filename_graph_labels_class,'a') as f:
        for i in graph_labels_class:
            f.write(str(i))
            f.write('\n')
    # filename_adj = perfix+'_adj.txt'
    # with open(filename_adj,'a') as fadj:
    #     for i in range(10):
    #         for j in range(N):
    #             fadj.write(str(adjall[i][j]))
    #             fadj.write('\n')

if __name__ == "__main__":
    main()
