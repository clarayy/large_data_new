from os import confstr_names
from scipy.sparse import data
from sklearn.metrics.pairwise import cosine_similarity
import numpy as np
import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt
from scipy.spatial.distance import cosine 
import matplotlib.cm as cm
import scipy.spatial.distance as dist
import time
import random
import os
#将相同节点得到的总的感染节点属性加起来作为该节点的特征
N=500 #图的大小
m=50   #每个节点的生成的张数
p=0.1
bmname = 'WS500'
#############################
#part1:得到每个节点的向量,保存为bmnamendataset.npy
path = os.getcwd()+'/research/k_means/data/'
filename_node_labels = path + bmname+'_p'+str(p)+'_m'+str(m)+'/'+bmname+'_p'+str(p)+'_m'+str(m)+'_node_labels.txt'
labels = []
#node = [226,372,487]
with open(filename_node_labels,'r') as f:
    for line in f.readlines():
        line = line.strip('\n')
        labels.append(int(line))
filename_graph_labels = path +bmname+'_p'+str(p)+'_m'+str(m)+'/'+bmname+'_p'+str(p)+'_m'+str(m)+'_graph_labels.txt'
graph_labels = []
labels_vals=[]
with open(filename_graph_labels,'r') as f:
    for line in f.readlines():
        line = line.strip('\n')
        val = int(line)
        if val not in labels_vals:
            labels_vals.append(val)
        graph_labels.append(val)
label_map_to_int = {val: i for i ,val in enumerate(labels_vals)}       #统计不重复的labels
graph_labels = np.array([label_map_to_int[l] for l in graph_labels])   #重新命名labels
# print(labels)
# a=[]
# for i in range(500):
#     if labels[i]==1:
#         a.append(i)
# I= [0, 2, 4, 1, 26, 43, 61, 183, 244, 245, 249, 186, 11, 52, 60, 94, 96, 181, 241, 290, 429, 438]
# I.sort()
# print(a==I)
def listadd(list1,list2):
    c=[]
    for i in range(step2):
        c.append(list1[i]+list2[i])
    return c
step1 = N*m
a = [labels[i:i+step1] for i in range(0,len(labels),step1)]    #分成节点个数份
#print(a)
dataSet =[]
dataSet_new = []
dict={}
for i in range(len(a)):
    step2 = N
    tmp_node = a[i]
    b = [tmp_node[i:i+step2] for i in range(0,len(tmp_node),step2)]    #每个节点个数分成m张数 b的len为m
#print(b)
    result=[]
    for num in range(N):
        result.append(0)
    for j in range(len(b)):
        result = listadd(result,b[j])    #每个节点的m张中，对应的I相加
#x=listadd(b[0],b[1])
    #print(result)
    new_result = [x/50 for x in result]
    #print(new_result)
    #print(label_map_to_int[i])
    dict[label_map_to_int[i]]=result
    dataSet.append(result)
    dataSet_new.append(new_result)
#print(dataSet)
ndataset = np.array(dataSet)   
print("dataset:",ndataset)
print(ndataset.shape)
np.save(path+bmname+'_p'+str(p)+'_m'+str(m)+"_ndataset1.npy",ndataset)   #numpy格式
ndataset_new = np.array(dataSet_new)   
print("dataset_new:",ndataset_new)
print(ndataset_new.shape)
np.save(path+bmname+'_p'+str(p)+'_m'+str(m)+"_ndataset2.npy",ndataset_new)   #numpy格式
#print(dataSet.shape)
########################part1.end
# #####两个向量之间距离的计算方法
# #print('dict:',dict)
# #print(dict[0])
# #print(dict[1])
# #计算相似度
# confe=[]   #对比的向量
# for i in range(N):
#     confe.append(1)
# s=[]   #余弦相似度
# sd=[]  #余弦相似度第二种方法
# for i in range(N):
#     a=cosine_similarity([dict[0]],[dict[i]])[0][0].tolist()
#     b=cosine(dict[0],dict[i])
#     s.append(a)
#     sd.append(b)
# #print(s)
# #print(sd)
# #皮尔森相关系数
# # person=[]
# # for i in range(N):
# #     person.append(np.corrcoef(dict[0],dict[i]))
# # print(person)
# #jaccard距离
# jaccard0=[]
# jaccard1=[]
# # for i in range(N):
# #     matv0 = np.vstack([dict[0],dict[i]])
# #     matv1 = np.vstack([dict[1],dict[i]])
# #     jacccard0.append(dist.pdist(matv0,'jaccard')[0].tolist())
# #     jacccard1.append(dist.pdist(matv1,'jaccard')[0].tolist())
# #print(jacccard)
#自己定义jaccard相似度
#用k-means算法得到的四个质心(每次得到的质心不同)
# centroids= [[0.46666667 0.66666667 4.2        0.73333333 3.53333333 0.33333333
#   0.13333333 0.2        0.53333333 0.2        0.2        0.26666667
#   0.26666667 1.53333333 0.13333333 0.2        0.8        0.93333333
#   1.33333333 0.8        0.4        0.46666667 0.46666667 0.
#   0.         0.         0.         0.         0.06666667 0.
#   0.8        0.06666667 0.93333333 4.06666667 0.4        0.
#   0.46666667 0.         4.73333333 2.4        3.33333333 0.2
#   3.06666667 2.4        4.26666667 1.8        2.26666667 0.2
#   0.06666667 0.         0.         0.         2.6        0.2
#   0.         0.         1.06666667 0.33333333 1.         1.6
#   2.         0.        ]
#  [3.1        3.1        1.2        2.7        1.6        3.4
#   3.4        0.1        1.         0.4        0.2        0.3
#   2.1        0.9        0.1        0.5        2.7        1.9
#   0.6        2.4        0.4        1.4        0.5        0.
#   0.         0.         0.         0.         0.         0.
#   1.9        3.1        2.8        0.6        1.         0.
#   1.         0.         0.9        0.         1.1        0.9
#   0.2        1.5        0.1        1.5        0.6        1.3
#   0.3        0.         0.         0.         0.4        0.2
#   0.1        0.         0.         0.         0.5        0.
#   0.4        0.        ]
#  [0.75       1.75       1.75       3.125      2.625      0.5
#   0.5625     0.         0.3125     0.         0.         0.
#   0.3125     1.875      0.         0.         0.1875     0.25
#   0.         1.5625     0.875      2.1875     4.0625     2.
#   0.         0.         0.         0.         0.         0.
#   0.3125     0.0625     1.375      1.25       3.5625     0.
#   4.25       0.875      1.875      0.1875     0.875      3.75
#   0.5625     0.625      0.8125     3.375      2.25       4.0625
#   1.25       0.         0.         0.         3.25       2.9375
#   1.875      0.         0.         0.125      0.         0.125
#   0.125      0.        ]
#  [0.         0.0952381  0.14285714 0.19047619 0.71428571 0.28571429
#   0.23809524 3.9047619  3.61904762 2.0952381  1.71428571 1.66666667
#   1.61904762 2.14285714 3.76190476 3.76190476 0.         0.
#   0.         0.19047619 0.         0.19047619 0.         0.
#   2.85714286 2.66666667 3.47619048 1.61904762 3.66666667 2.80952381
#   1.61904762 0.71428571 0.         0.28571429 0.         1.42857143
#   0.         0.         0.23809524 0.         0.04761905 0.
#   0.         0.         0.0952381  0.         0.14285714 0.
#   0.         0.33333333 0.9047619  1.42857143 0.         0.19047619
#   0.         0.47619048 0.         1.33333333 0.         0.
#   0.         0.85714286]]
# clusterAssment= [[ 1.         11.18033989]
#  [ 1.         14.86606875]
#  [ 0.         11.20303247]
#  [ 2.         13.96424004]
#  [ 0.          0.        ]
#  [ 1.         11.74734012]
#  [ 1.         11.95826074]
#  [ 3.         11.61895004]
#  [ 3.         11.56469724]
#  [ 3.         11.31115477]
#  [ 3.         12.19872489]
#  [ 3.         12.22108581]
#  [ 1.         13.07975535]
#  [ 0.          0.        ]
#  [ 3.          8.77496439]
#  [ 3.          9.89949494]
#  [ 1.          0.        ]
#  [ 1.         14.49137675]
#  [ 0.         10.21703536]
#  [ 1.         12.69172959]
#  [ 2.         11.57756451]
#  [ 2.         12.68817544]
#  [ 2.          9.11043358]
#  [ 2.          9.89949494]
#  [ 3.          0.        ]
#  [ 3.          5.19615242]
#  [ 3.          3.74165739]
#  [ 3.          6.4807407 ]
#  [ 3.          5.38516481]
#  [ 3.          8.        ]
#  [ 3.         13.03092476]
#  [ 1.         14.83239697]
#  [ 1.         15.26433752]
#  [ 0.          0.        ]
#  [ 2.         12.489996  ]
#  [ 3.          6.55743852]
#  [ 2.          0.        ]
#  [ 2.          8.54400375]
#  [ 0.          0.        ]
#  [ 0.          0.        ]
#  [ 0.          0.        ]
#  [ 2.          9.32737905]
#  [ 0.          0.        ]
#  [ 0.          9.8551841 ]
#  [ 0.          0.        ]
#  [ 2.         12.92284798]
#  [ 2.         12.64911064]
#  [ 2.         11.26942767]
#  [ 2.         14.28285686]
#  [ 3.         12.40967365]
#  [ 3.         11.23088225]
#  [ 3.          9.2736185 ]
#  [ 2.         10.72380529]
#  [ 2.         13.        ]
#  [ 2.          5.47722558]
#  [ 3.          7.21110255]
#  [ 0.          0.        ]
#  [ 3.         10.36994283]
#  [ 0.         11.98466651]
#  [ 0.          0.        ]
#  [ 0.         11.69791733]
#  [ 3.          7.34846923]]
# def self_jaccard(v1,v2):
#     up=0
#     for i in range(N):
#         if v1[i]==v2[i]:
#             up = up+1
#     #print("up:",up)
#     down = N*2-up
#     jac_sim = up/down
#     jac_dis = 1-jac_sim
#     #print("jac_sim:",jac_sim)
#     return jac_dis
# for i in range(N):
#     jaccard0.append(self_jaccard(dict[0],dict[i]))
#     jaccard1.append(self_jaccard(dict[1],dict[i]))
# class0=[]
# class1=[]
# for i in range(N):
#     if jaccard0[i]>jaccard1[i]:
#         class1.append(i)
#     else:
#         class0.append(i)
# print('class0=',class0)
# print('class1=',class1)
#
# #k-means算法
# # calculate Euclidean distance
# def euclDistance(vector1, vector2):
#     # print('vector1=',vector1)
#     # print('vector2=',vector2)
#     matv = np.vstack([vector1,vector2])
#     wrong = dist.pdist(matv,'jaccard')[0].tolist()
#     #print("wrong=",wrong)
#     right=np.sqrt(sum(np.power(vector2 - vector1, 2)))
#     #print('right=',right)
#     return wrong
# # init centroids with random samples
# def initCentroids(dataSet, k):
#     numSamples, dim = dataSet.shape
#     centroids = np.zeros((k, dim))
#     for i in range(k):
#         index = int(random.uniform(0, numSamples))
#         centroids[i, :] = dataSet[index, :]
#     return centroids

# # k-means cluster
# def kmeans(dataSet, k):
#     numSamples = dataSet.shape[0]
#     # first column stores which cluster this sample belongs to,
#     # second column stores the error between this sample and its centroid
#     clusterAssment = np.mat(np.zeros((numSamples, 2)))
#     clusterChanged = True

#     ## step 1: init centroids
#     centroids = initCentroids(dataSet, k)

#     while clusterChanged:
#         clusterChanged = False
#         ## for each sample
#         for i in range(numSamples):
#             minDist  = 100000.0
#             minIndex = 0
#             ## for each centroid
#             ## step 2: find the centroid who is closest
#             for j in range(k):
#                 distance = euclDistance(centroids[j, :], dataSet[i, :])
#                 if distance < minDist:
#                     minDist  = distance
#                     minIndex = j

#             ## step 3: update its cluster
#             if clusterAssment[i, 0] != minIndex:
#                 clusterChanged = True
#                 clusterAssment[i, :] = minIndex, minDist

#         ## step 4: update centroids
#         for j in range(k):
#             pointsInCluster = dataSet[np.nonzero(clusterAssment[:, 0].A == j)[0]]
#             centroids[j, :] = np.mean(pointsInCluster, axis = 0)

#     print('Congratulations, cluster complete!')
#     return centroids, clusterAssment

# # show your cluster only available with 2-D data
# def showCluster(dataSet, k, centroids, clusterAssment):
#     numSamples, dim = dataSet.shape
#     # if dim != 2:
#     #     print("Sorry! I can not draw because the dimension of your data is not 2!")
#     #     return 1

#     mark = ['or', 'ob', 'og', 'ok', '^r', '+r', 'sr', 'dr', '<r', 'pr']
#     if k > len(mark):
#         print("Sorry! Your k is too large! please contact Zouxy")
#         return 1

#     # draw all samples
#     for i in range(numSamples):
#         markIndex = int(clusterAssment[i, 0])
#         plt.plot(dataSet[i, 0], dataSet[i, 1], mark[markIndex])

#     mark = ['Dr', 'Db', 'Dg', 'Dk', '^b', '+b', 'sb', 'db', '<b', 'pb']
#     # draw the centroids
#     for i in range(k):
#         plt.plot(centroids[i, 0], centroids[i, 1], mark[i], markersize = 12)

#     plt.show()
# print("step 2: clustering...")
# dataSet = np.mat(dataSet)
# k = 4
# centroids, clusterAssment = kmeans(dataSet, k)
# print("centroids=",centroids)
# print('clusterAssment=',clusterAssment)
# ## step 3: show the result
# print("step 3: show the result...")
# showCluster(dataSet, k, centroids, clusterAssment)
#
#class0,1,2,3生成dict表示不同颜色
# anotheradd=[]
# anotheradd.append(class0)
# anotheradd.append(class1)
# dict_par = {}
# for i in range(len(anotheradd)):#i=0~9
#     for value in anotheradd[i]:
#         dict_par[value] = i
#     i = i+1
# print(dict_par)
# s1 = cosine_similarity([[1,1,0,0]],[[0,1,0,0]])
# print(s1)
#####################################################
#part2:将分类结果在图上表示
#dolphins的4分类结果
#classresult = [2, 2, 3, 2, 3, 2, 2, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 3, 3, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 2, 3, 2, 0, 2, 2, 3, 3, 3, 2, 3, 3, 3, 2, 2, 2, 2, 0, 1, 0, 2, 2, 2, 0, 3, 0, 3, 3, 3, 0]
#food500的4分类结果
#classresult = [1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 3, 3, 1, 3, 0, 0, 0, 0, 0, 2, 3, 3, 3, 3, 1, 3, 3, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 3, 1, 3, 1, 1, 3, 3, 3, 3, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 3, 2, 2, 3, 3, 2, 3, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 3, 2, 3, 3, 3, 3, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 3, 1, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 1, 1, 1, 3, 3, 1, 3, 3, 3, 3, 2, 2, 3, 3, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 1, 3, 3, 1, 3, 1, 1, 1, 1, 2, 2, 1, 1, 3, 3, 3, 1, 3, 1, 1, 2, 3, 1, 1, 1, 3, 1, 3, 1, 3, 1, 3, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 1, 0, 2, 2, 2, 3, 3, 2, 2, 2, 3, 3, 3, 3, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0, 0, 0, 0, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 2, 1, 3, 3, 3, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 0, 0, 1, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 3, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 0, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3, 3, 1, 3, 2, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 1, 3, 3, 3, 1, 3, 3, 3, 3, 1, 1, 2, 2, 2, 2, 3, 3, 1, 1, 1, 1, 1, 3, 1, 3, 3, 3, 1, 1, 2, 1, 1, 2, 3, 1, 3, 1, 2, 2, 3, 3, 2, 3, 2, 1, 2, 2, 2, 2]
#food500的5分类结果
#classresult = [2, 2, 2, 3, 2, 2, 2, 3, 4, 3, 4, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 4, 4, 2, 3, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 2, 4, 4, 2, 2, 2, 0, 2, 3, 3, 3, 3, 2, 3, 2, 2, 3, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 2, 2, 3, 3, 1, 2, 2, 1, 2, 1, 3, 4, 3, 3, 4, 1, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 3, 3, 1, 3, 3, 3, 4, 3, 3, 3, 1, 1, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 4, 0, 0, 0, 0, 4, 1, 0, 0, 0, 1, 0, 4, 4, 4, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 3, 3, 1, 1, 1, 3, 1, 2, 1, 3, 3, 3, 3, 3, 4, 2, 3, 3, 2, 3, 4, 3, 4, 2, 0, 4, 1, 1, 1, 1, 4, 4, 4, 1, 4, 4, 4, 2, 2, 1, 3, 3, 2, 3, 4, 4, 3, 3, 3, 3, 3, 0, 0, 0, 4, 4, 4, 4, 2, 3, 2, 2, 2, 3, 2, 2, 2, 3, 3, 3, 3, 2, 3, 3, 2, 3, 3, 4, 4, 2, 2, 3, 1, 4, 2, 4, 4, 1, 4, 0, 0, 1, 4, 3, 1, 3, 3, 3, 3, 1, 3, 4, 1, 3, 1, 1, 3, 1, 3, 3, 3, 3, 0, 0, 3, 3, 1, 1, 1, 3, 4, 3, 3, 0, 4, 3, 3, 1, 1, 1, 4, 3, 3, 3, 1, 0, 0, 1, 1, 1, 1, 1, 4, 0, 0, 2, 0, 0, 0, 0, 1, 3, 0, 0, 0, 4, 4, 4, 1, 3, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 3, 0, 0, 0, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 1, 1, 4, 3, 3, 4, 4, 3, 4, 4, 4, 4, 3, 3, 2, 3, 4, 4, 1, 2, 1, 1, 1, 2, 0, 3, 4, 1, 1, 0, 0, 0, 3, 2, 1, 2, 3, 3, 2, 0, 0, 3, 4, 4, 3, 1, 3, 2, 0, 2, 0, 0, 1, 2, 2, 0, 0, 0, 0, 3, 3, 3, 3, 0, 2, 4, 2, 1, 1, 1, 1, 1, 1, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 2, 4, 4, 2, 3, 0, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 1, 2, 2, 1, 1, 1, 2, 4, 4, 1, 1, 3, 3, 0, 0, 0, 0, 4, 4, 3, 2, 3, 2, 3, 1, 3, 1, 1, 4, 3, 3, 0, 2, 3, 0, 4, 3, 1, 2, 0, 0, 1, 4, 0, 1, 0, 3, 0, 0, 0, 0]
##food500的5分类结果 官方jaccard距离
#classresult =[0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 2, 4, 4, 0, 2, 1, 0, 4, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 4, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 4, 0, 0, 0, 4, 1, 3, 0, 1, 3, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 3, 4, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 1, 4, 0, 4, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 3, 4, 0, 0, 4, 0, 0, 4, 0, 0, 0, 3, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 2, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 3, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 1, 0, 0]
#classresult = [1, 1, 4, 1, 4, 1, 1, 3, 3, 3, 3, 0, 0, 0, 3, 3, 1, 1, 4, 0, 0, 0, 2, 2, 3, 3, 3, 3, 3, 3, 0, 0, 1, 4, 2, 3, 2, 2, 4, 4, 4, 2, 4, 4, 4, 2, 4, 2, 1, 3, 3, 3, 2, 2, 2, 3, 4, 3, 4, 4, 4, 3]
#p2p2068_p0.1_m10
# classresult = [2, 1, 1, 4, 2, 2, 1, 1, 1, 4, 0, 4, 4, 3, 4, 1, 4, 1, 0, 2, 3, 1, 3, 3, 0, 1, 0, 3, 4, 1, 4, 4, 4, 1, 1, 1, 0, 4, 1, 4, 3, 0, 2, 1, 4, 1, 0, 1, 4, 3, 1, 1, 4, 4, 1, 1, 4, 3, 1, 0, 2, 0, 2, 0, 2, 1, 1, 4, 4, 2, 4, 1, 3, 2, 1, 4, 4, 4, 4, 1, 2, 4, 4, 1, 3, 2, 3, 4, 0, 2, 4, 1, 4, 4, 1, 4, 4, 0, 4, 1, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 2, 1, 1, 1, 0, 1, 4, 2, 2, 0, 0, 2, 3, 2, 3, 1, 3, 1, 0, 0, 0, 1, 4, 3, 4, 1, 1, 4, 4, 2, 2, 3, 2, 4, 1, 4, 3, 2, 1, 2, 3, 3, 0, 4, 1, 1, 0, 4, 1, 4, 2, 0, 1, 0, 4, 4, 3, 1, 1, 2, 2, 1, 3, 2, 1, 2, 4, 0, 3, 3, 2, 2, 0, 3, 4, 1, 0, 4, 4, 1, 2, 4, 4, 4, 0, 2, 1, 1, 3, 3, 4, 2, 2, 1, 2, 1, 4, 1, 4, 0, 0, 0, 1, 0, 1, 4, 4, 4, 1, 0, 4, 1, 4, 3, 0, 4, 4, 4, 1, 4, 2, 2, 1, 4, 1, 0, 1, 1, 1, 4, 1, 4, 2, 4, 3, 4, 1, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 0, 3, 2, 3, 1, 1, 3, 2, 0, 4, 4, 4, 2, 0, 4, 1, 3, 3, 1, 3, 1, 2, 2, 0, 4, 4, 0, 2, 3, 2, 3, 4, 2, 1, 1, 0, 3, 1, 4, 2, 1, 4, 4, 3, 2, 0, 0, 2, 4, 4, 3, 1, 3, 3, 1, 4, 3, 1, 3, 2, 2, 2, 4, 1, 1, 4, 4, 0, 1, 0, 4, 3, 3, 3, 0, 4, 0, 1, 0, 4, 4, 4, 4, 4, 1, 2, 4, 1, 1, 3, 2, 1, 4, 4, 4, 4, 3, 3, 4, 2, 3, 0, 2, 4, 3, 1, 4, 4, 0, 4, 4, 1, 0, 4, 1, 2, 1, 1, 2, 1, 2, 3, 0, 1, 1, 3, 0, 4, 2, 1, 2, 4, 4, 2, 1, 0, 0, 4, 4, 1, 2, 0, 4, 4, 4, 1, 4, 4, 2, 2, 1, 1, 1, 2, 4, 0, 1, 4, 2, 4, 2, 4, 4, 4, 2, 3, 4, 4, 3, 1, 0, 4, 0, 2, 0, 1, 4, 1, 1, 4, 2, 4, 4, 1, 4, 4, 1, 1, 4, 1, 1, 3, 0, 4, 2, 4, 0, 3, 4, 0, 4, 4, 2, 4, 3, 2, 4, 1, 1, 1, 2, 4, 4, 1, 2, 3, 0, 4, 3, 4, 2, 4, 2, 3, 2, 4, 4, 1, 2, 1, 1, 2, 1, 2, 0, 1, 4, 4, 1, 4, 4, 0, 1, 4, 4, 2, 2, 1, 3, 4, 2, 4, 2, 1, 4, 1, 2, 4, 1, 3, 0, 1, 4, 4, 4, 2, 4, 4, 1, 1, 4, 4, 4, 1, 4, 0, 2, 4, 1, 4, 4, 3, 4, 2, 2, 3, 4, 2, 0, 1, 3, 3, 4, 4, 2, 1, 1, 1, 1, 4, 0, 2, 4, 4, 4, 1, 4, 0, 4, 3, 1, 3, 0, 3, 0, 2, 1, 4, 0, 2, 3, 0, 4, 4, 4, 0, 3, 2, 1, 2, 2, 2, 1, 1, 1, 3, 1, 4, 4, 1, 2, 3, 3, 2, 2, 4, 2, 4, 2, 4, 1, 2, 1, 4, 1, 1, 0, 4, 0, 3, 3, 0, 4, 4, 3, 1, 4, 4, 2, 2, 1, 4, 4, 1, 3, 2, 4, 0, 0, 4, 4, 0, 2, 2, 2, 0, 4, 4, 4, 2, 2, 3, 0, 0, 1, 4, 1, 3, 4, 0, 0, 0, 4, 4, 1, 3, 1, 0, 3, 0, 3, 1, 2, 1, 0, 0, 1, 4, 1, 2, 1, 1, 1, 3, 0, 4, 4, 1, 4, 4, 3, 1, 1, 1, 4, 2, 1, 4, 4, 3, 1, 1, 4, 1, 4, 3, 4, 1, 1, 4, 1, 2, 0, 4, 1, 2, 4, 2, 0, 3, 1, 0, 1, 1, 1, 4, 4, 2, 2, 1, 0, 1, 2, 3, 2, 4, 4, 2, 1, 2, 4, 0, 0, 4, 2, 4, 0, 1, 1, 1, 3, 3, 1, 3, 1, 1, 4, 3, 4, 3, 0, 4, 1, 1, 0, 4, 0, 2, 1, 2, 4, 1, 1, 3, 1, 0, 4, 1, 4, 1, 3, 1, 1, 4, 4, 3, 4, 0, 1, 0, 0, 2, 3, 1, 4, 4, 4, 0, 2, 0, 3, 4, 1, 4, 3, 2, 1, 4, 1, 1, 3, 2, 4, 2, 0, 3, 1, 4, 2, 3, 3, 1, 1, 4, 1, 4, 1, 1, 0, 4, 2, 2, 4, 0, 2, 2, 4, 0, 0, 1, 3, 1, 2, 1, 2, 4, 1, 1, 1, 1, 2, 2, 0, 1, 0, 4, 0, 2, 1, 4, 4, 4, 0, 4, 4, 1, 2, 4, 2, 4, 2, 2, 1, 1, 0, 1, 1, 4, 4, 4, 2, 0, 1, 1, 0, 2, 4, 4, 4, 4, 4, 2, 0, 1, 4, 2, 3, 4, 4, 2, 1, 1, 1, 2, 0, 0, 0, 1, 0, 3, 4, 2, 2, 2, 1, 3, 1, 1, 3, 2, 3, 4, 1, 1, 3, 0, 4, 1, 4, 4, 2, 4, 1, 4, 1, 3, 2, 1, 2, 2, 1, 1, 4, 2, 1, 2, 2, 3, 4, 0, 4, 1, 4, 4, 4, 4, 0, 3, 2, 1, 0, 2, 1, 4, 2, 3, 3, 1, 3, 1, 1, 2, 4, 0, 2, 1, 1, 1, 4, 2, 4, 4, 1, 0, 0, 4, 2, 4, 1, 1, 4, 0, 2, 3, 2, 2, 4, 1, 1, 1, 3, 4, 1, 4, 1, 4, 4, 2, 2, 4, 2, 3, 1, 2, 3, 1, 0, 1, 0, 1, 3, 2, 3, 2, 0, 2, 1, 4, 1, 1, 4, 4, 1, 3, 3, 2, 4, 3, 0, 4, 3, 4, 0, 2, 0, 4, 4, 4, 3, 4, 4, 2, 4, 0, 4, 2, 4, 3, 1, 0, 4, 2, 2, 4, 1, 1, 0, 2, 4, 3, 0, 4, 4, 2, 0, 4, 2, 1, 1, 3, 3, 3, 4, 1, 4, 0, 2, 0, 2, 4, 4, 4, 2, 3, 4, 4, 0, 2, 0, 4, 2, 4, 2, 1, 4, 4, 4, 4, 3, 1, 0, 3, 1, 0, 1, 1, 1, 2, 3, 1, 4, 1, 0, 4, 1, 2, 1, 4, 1, 4, 2, 4, 4, 3, 2, 2, 2, 4, 1, 4, 4, 3, 1, 0, 2, 1, 0, 4, 1, 1, 1, 4, 3, 4, 3, 4, 4, 4, 4, 2, 1, 2, 1, 1, 0, 3, 1, 4, 3, 4, 4, 1, 1, 1, 2, 0, 4, 1, 1, 4, 1, 4, 4, 3, 2, 1, 2, 3, 0, 4, 2, 0, 0, 4, 2, 2, 1, 1, 1, 1, 1, 4, 1, 3, 4, 4, 4, 4, 4, 1, 4, 2, 0, 1, 1, 1, 2, 4, 1, 0, 1, 2, 4, 2, 4, 2, 4, 1, 4, 2, 1, 4, 1, 1, 2, 4, 0, 4, 0, 3, 1, 2, 0, 3, 1, 2, 4, 1, 3, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 2, 0, 1, 4, 1, 2, 2, 4, 2, 4, 3, 3, 0, 3, 3, 1, 4, 1, 4, 2, 1, 3, 3, 1, 3, 4, 2, 0, 0, 4, 1, 0, 3, 2, 1, 0, 1, 1, 2, 3, 4, 0, 4, 4, 4, 1, 1, 0, 4, 4, 1, 1, 2, 4, 1, 2, 2, 2, 2, 4, 0, 4, 3, 4, 4, 3, 1, 4, 0, 2, 1, 2, 1, 4, 4, 2, 0, 2, 1, 0, 3, 2, 4, 0, 4, 1, 0, 4, 2, 2, 1, 3, 3, 3, 1, 1, 0, 4, 0, 1, 1, 0, 4, 4, 3, 1, 1, 4, 2, 1, 1, 4, 0, 2, 4, 4, 4, 1, 1, 4, 1, 1, 3, 2, 1, 4, 1, 1, 3, 4, 3, 4, 4, 4, 2, 4, 1, 4, 4, 2, 4, 2, 4, 0, 1, 0, 2, 4, 0, 4, 4, 4, 2, 1, 4, 4, 4, 1, 2, 1, 1, 0, 2, 0, 4, 0, 4, 4, 2, 4, 0, 2, 4, 0, 0, 4, 1, 2, 2, 1, 2, 1, 4, 4, 2, 1, 2, 1, 4, 1, 4, 4, 2, 3, 3, 4, 0, 3, 4, 4, 3, 0, 0, 2, 0, 4, 4, 0, 4, 3, 1, 2, 3, 1, 1, 4, 1, 4, 2, 4, 4, 1, 2, 4, 0, 0, 2, 1, 1, 0, 1, 3, 1, 4, 1, 1, 4, 2, 4, 4, 1, 4, 0, 1, 0, 2, 2, 1, 1, 1, 2, 4, 2, 3, 2, 0, 1, 2, 1, 1, 4, 1, 4, 3, 0, 0, 4, 4, 0, 3, 4, 3, 2, 1, 4, 0, 2, 3, 1, 3, 4, 1, 1, 4, 0, 1, 4, 1, 3, 0, 2, 1, 4, 2, 4, 1, 4, 4, 2, 1, 2, 1, 2, 4, 1, 1, 3, 3, 4, 3, 2, 2, 1, 1, 4, 4, 2, 1, 1, 4, 3, 2, 1, 2, 0, 1, 0, 2, 4, 1, 4, 1, 4, 4, 4, 0, 4, 2, 4, 3, 4, 1, 4, 2, 2, 1, 1, 2, 1, 4, 0, 1, 4, 1, 1, 4, 0, 4, 3, 0, 2, 4, 4, 4, 4, 1, 2, 1, 3, 4, 3, 4, 0, 4, 0, 4, 3, 1, 1, 4, 2, 1, 2, 4, 1, 1, 4, 1, 2, 4, 2, 4, 0, 4, 2, 0, 0, 4, 3, 4, 1, 4, 0, 1, 4, 4, 1, 1, 4, 3, 0, 0, 3, 4, 1, 1, 1, 2, 1, 4, 3, 4, 4, 4, 0, 4, 4, 1, 1, 4, 4, 3, 2, 2, 1, 1, 4, 1, 4, 4, 1, 1, 4, 4, 1, 4, 2, 2, 0, 0, 4, 4, 3, 0, 1, 2, 4, 1, 0, 1, 2, 0, 1, 4, 4, 2, 1, 1, 4, 2, 4, 1, 4, 4, 1, 3, 1, 2, 4, 0, 3, 1, 1, 3, 2, 1, 0, 1, 4, 3, 4, 4, 1, 2, 4, 1, 4, 0, 3, 4, 3, 4, 4, 2, 2, 2, 4, 3, 0, 0, 1, 2, 4, 4, 1, 2, 4, 1, 2, 4, 2, 3, 4, 4, 0, 3, 2, 3, 2, 0, 1, 3, 1, 2, 4, 2, 3, 4, 1, 1, 1, 4, 2, 3, 2, 2, 2, 3, 4, 1, 4, 0, 4, 1, 2, 0, 1, 4, 1, 0, 2, 0, 0, 2, 3, 2, 1, 1, 0, 3, 4, 4, 2, 3, 4, 0, 0, 1, 4, 2, 4, 3, 3, 4, 1, 1, 2, 4, 4, 1, 0, 1, 1, 1, 1, 0, 4, 3, 4, 1, 3, 4, 4, 4, 0, 4, 1, 4, 0, 0, 4, 1, 3, 2, 2, 0, 4, 2, 3, 4, 3, 2, 3, 4, 1, 0, 2, 1, 1, 1, 4, 3, 4, 4, 4, 0, 4, 2, 2, 2, 1, 4, 4, 4, 1, 1, 4, 3, 4, 1, 1, 4, 3, 4, 4, 1, 0, 1, 1, 4, 0, 3, 4, 0, 4, 4, 0, 1, 4, 4, 0, 0, 0, 2, 4, 1, 4, 4, 4, 1, 3, 4, 1, 1, 4, 3, 3, 1, 0, 3, 4, 2, 1, 4, 2, 4, 1, 1, 4, 3, 2, 2, 0, 4, 4, 3, 4, 4, 3, 2, 1, 4, 4, 2, 2, 2, 4, 3, 3, 4, 4, 2, 0, 0, 4, 2, 4, 4, 3, 2, 1, 2, 4, 2, 3, 2, 4, 4, 4, 3, 4, 1, 3, 3, 2, 3, 3, 4, 2, 4, 0, 0, 4, 3, 0, 4, 4, 2, 2, 4, 3, 2, 2, 4, 1, 2, 3, 1, 3, 4, 4, 3, 1, 1, 4, 2, 4, 1, 1, 1, 2, 1, 1, 2, 0, 1, 3, 4, 1, 0, 0, 1, 1, 4, 1, 4, 4, 4, 1, 4, 4, 0, 2, 3, 4, 0, 1, 3, 4, 2, 0]
# new_dict={}
# for i in range(N):
#     new_dict[i]=classresult[i]
# #print(new_dict)
# #显示图
# name = bmname
# # B = np.load(name+".npy")#读取固定的图
# # G = nx.Graph(B)
# G = nx.read_edgelist('./'+name+'_weight.txt',nodetype = int,data=(('weight',float),),create_using=nx.Graph())
# pos = nx.spring_layout(G) #为什么报错！！！！！！！！！！
# nx.draw(G,pos,with_labels = True)#逗号是中文的  #画图
# plt.show()
# # draw the graph
# pos = nx.spring_layout(G)
# # color the nodes according to their partition
# cmap = cm.get_cmap('viridis', max(new_dict.values()) + 1)
# nx.draw_networkx_nodes(G, pos, new_dict.keys(),
#                        cmap=cmap, node_color=list(new_dict.values()))
# nx.draw_networkx_edges(G, pos, alpha=0.5)
# nx.draw_networkx_labels(G,pos,font_size=10)
# plt.show()